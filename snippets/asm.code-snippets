{
  "Label": {
    "prefix": "label",
    "body": [
      "_start:"
    ],
    "description": "Define a label"
  },
  "Hello World": {
    "prefix": "hello_world",
    "body": [
      "section .data",
      "    msg db 'Hello, World!', 0",
      "",
      "section .text",
      "    global _start",
      "_start:",
      "    ; write message",
      "    mov rax, 1          ; syscall number for sys_write",
      "    mov rdi, 1          ; file descriptor 1 (stdout)",
      "    mov rsi, msg        ; pointer to message",
      "    mov rdx, 13         ; length of message",
      "    syscall             ; make the syscall",
      "",
      "    ; exit program",
      "    mov rax, 60         ; syscall number for sys_exit",
      "    xor rdi, rdi        ; status code 0",
      "    syscall             ; make the syscall"
    ],
    "description": "Hello World in Assembly"
  },
  "Function Prologue": {
    "prefix": "func_prologue",
    "body": [
      "push rbp",
      "mov rdi, rsi",
      "call my_func",
      "pop rbp"
    ],
    "description": "Function prologue in x86_64"
  },
  "Exit Program": {
    "prefix": "exit_program",
    "body": [
      "mov rax, 60    ; syscall number for sys_exit",
      "xor rdi, rdi   ; exit status 0",
      "syscall        ; call the kernel"
    ],
    "description": "Exit program (Linux x86_64)"
  },
  "Print Integer": {
    "prefix": "print_int",
    "body": [
      "mov rsi, rbx    ; integer to print",
      "mov rax, 1      ; syscall number for sys_write",
      "mov rdi, 1      ; file descriptor (stdout)",
      "mov rdx, 4      ; number of bytes to write",
      "syscall         ; make syscall"
    ],
    "description": "Print integer to stdout"
  },
  "Simple Loop": {
    "prefix": "simple_loop",
    "body": [
      "mov rax, 10       ; initialize counter",
      "loop_start:",
      "    dec rax        ; decrement counter",
      "    jnz loop_start ; jump if not zero"
    ],
    "description": "Simple decrementing loop"
  },
  "Push Example": {
    "prefix": "push_example",
    "body": [
      "push rbx",
      "push rax"
    ],
    "description": "Push registers onto the stack"
  },
  "Pop Example": {
    "prefix": "pop_example",
    "body": [
      "pop rax",
      "pop rbx"
    ],
    "description": "Pop registers from the stack"
  }
}

